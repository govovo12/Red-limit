import re
import typer
from pathlib import Path
from dotenv import dotenv_values

# === Ë®≠ÂÆöË∑ØÂæë ===
ROOT_DIR = Path(__file__).resolve().parents[2]
ENV_USER_PATH = ROOT_DIR / ".env.user"

app = typer.Typer()


# === ‚úÖ PF_ID È©óË≠âÈÇèËºØ ===
def validate_pf_id(pf_id: str) -> str:
    if "_" not in pf_id:
        typer.secho("‚ùå PF_ID Ê†ºÂºèÈåØË™§ÔºöÁº∫Â∞ëÂ∫ïÁ∑ö _ÔºåË´ãÈáçÊñ∞Ëº∏ÂÖ•„ÄÇ", fg=typer.colors.RED)
        return None
    if not re.fullmatch(r"[a-zA-Z0-9_]+", pf_id):
        typer.secho("‚ùå PF_ID Áî±Ëã±Êñá + Êï∏Â≠óÁµÑÂêàÔºåË´ãÈáçÊñ∞Ëº∏ÂÖ•„ÄÇ", fg=typer.colors.RED)
        return None
    return pf_id


# === ‚úÖ PRIVATE_KEY È©óË≠âÈÇèËºØÔºàÂö¥Ê†ºÁâàÔºâ
def validate_private_key(key: str) -> str:
    key = key.strip()
    if not re.fullmatch(r"[a-zA-Z0-9]{32}", key):
        typer.secho("‚ùå PRIVATE_KEY ÂÉÖÂÖÅË®±Ëã±ÊñáËàáÊï∏Â≠óÁµÑÂêàÔºå‰∏îÈï∑Â∫¶ÈúÄÁÇ∫ 32 Â≠óÂÖÉÔºåË´ãÈáçÊñ∞Ëº∏ÂÖ•„ÄÇ", fg=typer.colors.RED)
        return None
    return key


# === ‚úÖ BET_LEVEL_MODE ÈÅ∏ÂñÆÔºà‰∏≠Êñá + ÈôêÂà∂Âè™ËÉΩËº∏ÂÖ• 1 Êàñ 2Ôºâ
def ask_bet_level_mode() -> str:
    typer.echo("Ë´ãÈÅ∏ÊìáÈôêÁ¥ÖÊ®°ÂºèÔºö")
    typer.echo("  1. ÊúÄÂ§ßÈôêÁ¥ÖÔºàmaxÔºâ")
    typer.echo("  2. ÊúÄÂ∞èÈôêÁ¥ÖÔºàminÔºâ")
    typer.echo("")

    mapping = {
        "1": "max",
        "2": "min"
    }

    while True:
        choice = typer.prompt("Ë´ãËº∏ÂÖ•Â∞çÊáâÊï∏Â≠ó [1 or 2]")
        if choice in mapping:
            return mapping[choice]
        typer.secho("‚ùå ÈôêÁ¥ÖÊ®°ÂºèÂÉÖËÉΩÁÇ∫ 1ÔºàÊúÄÂ§ßÈôêÁ¥ÖÔºâÊàñ 2ÔºàÊúÄÂ∞èÈôêÁ¥ÖÔºâÔºåË´ãÈáçÊñ∞Ëº∏ÂÖ•„ÄÇ", fg=typer.colors.RED)


# === ‚úÖ BET_AMOUNT_RULE Ê¢ù‰ª∂ÈÅ∏ÂñÆ
def ask_bet_rule() -> str:
    typer.echo("Ë´ãÈÅ∏ÊìáÈôêÁ¥ÖÊ¢ù‰ª∂ÈÅãÁÆóÊñπÂºèÔºö")
    typer.echo("  1. Â§ßÊñºÔºà>Ôºâ")
    typer.echo("  2. Â∞èÊñºÔºà<Ôºâ")
    typer.echo("  3. Â§ßÊñºÁ≠âÊñºÔºà>=Ôºâ")
    typer.echo("  4. Â∞èÊñºÁ≠âÊñºÔºà<=Ôºâ")
    typer.echo("  5. Á≠âÊñºÔºà==Ôºâ")
    typer.echo("  6. ‰∏çÁ≠âÊñºÔºà!=Ôºâ")
    typer.echo("")

    operator_mapping = {
        "1": ">",
        "2": "<",
        "3": ">=",
        "4": "<=",
        "5": "==",
        "6": "!="
    }

    while True:
        op_choice = typer.prompt("Ë´ãËº∏ÂÖ•Â∞çÊáâÊï∏Â≠ó [1~6]")
        if op_choice in operator_mapping:
            break
        typer.secho("‚ùå Ë´ãËº∏ÂÖ• 1~6 ‰πãÈñìÁöÑÊï∏Â≠óÔºÅ", fg=typer.colors.RED)

    operator = operator_mapping[op_choice]

    while True:
        value = typer.prompt("Ë´ãËº∏ÂÖ•ÈôêÁ¥ÖÊï∏ÂÄºÔºà‰æãÂ¶Ç 10 Êàñ 0.05Ôºâ")
        try:
            float(value)
            break
        except ValueError:
            typer.secho("‚ùå Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÊï∏Â≠óÔºÅ", fg=typer.colors.RED)

    return f"{operator}{value}"


# === ‚úÖ ‰∏ªÂëΩ‰ª§
@app.command()
def configure():
    # Step 1: PF_ID
    while True:
        pf_id_input = typer.prompt("Ë´ãËº∏ÂÖ• PF_ID")
        validated = validate_pf_id(pf_id_input)
        if validated:
            pf_id = validated
            break

    # Step 2: PRIVATE_KEY
    while True:
        key_input = typer.prompt("Ë´ãËº∏ÂÖ• PRIVATE_KEY")
        validated = validate_private_key(key_input)
        if validated:
            private_key = validated
            break

    # Step 3: BET_LEVEL_MODE
    bet_mode = ask_bet_level_mode()

    # Step 4: BET_AMOUNT_RULE
    bet_rule = ask_bet_rule()

    # Step 5: ÂØ´ÂÖ• .env.user
    existing_env = dotenv_values(ENV_USER_PATH) if ENV_USER_PATH.exists() else {}
    existing_env.update({
        "PF_ID": pf_id,
        "PRIVATE_KEY": private_key,
        "BET_AMOUNT_RULE": bet_rule,
        "BET_LEVEL_MODE": bet_mode,
    })

    content = "\n".join(
        [f'{key}="{value}"' for key, value in existing_env.items()]
    ) + "\n"

    ENV_USER_PATH.write_text(content, encoding="utf-8")

    typer.echo("\n‚úÖ Â∑≤ÊàêÂäüÊõ¥Êñ∞ .env.user Ê™îÊ°àÔºÅ")
    typer.echo(f"üìÑ ÂØ´ÂÖ•Ë∑ØÂæëÔºö{ENV_USER_PATH}")


if __name__ == "__main__":
    app()
